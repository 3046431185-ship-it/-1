local Button = Tab:Button({
    Title = "最强战场",
    Desc = "加载最强战场菜单",
    Locked = false,
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
        local StarterGui = game:GetService("StarterGui")
        local RunService = game:GetService("RunService")
        local TweenService = game:GetService("TweenService")
        local UserInputService = game:GetService("UserInputService")
        local VirtualInputManager = game:GetService("VirtualInputManager")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Camera = game:GetService('Workspace').CurrentCamera

        local Humanoid

        local function SafeDebugPrint(message)
            print("[DEBUG] " .. message)
        endlocal function InitializeHumanoid()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    if character then
        Humanoid = character:FindFirstChild("Humanoid")
        if Humanoid then
            HumanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if not HumanoidRootPart then
                SafeDebugPrint("HumanoidRootPart not found for " .. LocalPlayer.Name)
            else
                SafeDebugPrint("HumanoidRootPart initialized for " .. LocalPlayer.Name)
            end
        else
            SafeDebugPrint("Humanoid not found for " .. LocalPlayer.Name)
        end
    end
end

if LocalPlayer.Character then
    InitializeHumanoid()
end

LocalPlayer.CharacterAdded:Connect(InitializeHumanoid)

local kenConfiguration = {
    Main = {
        Combat = {
            AttackAura = false,
            AutoParry = false
        },
        Farm = {
            KillFarm = false,
            AutoUltimate = true
        }
    },
    Player = {
        Character = {
            OverwriteProperties = false,
            WalkSpeed = 50,
            JumpPower = 50
        }
    }
}local Functions = {}

function Functions.BestTarget(MaxDistance)
    MaxDistance = MaxDistance or math.huge
    local Target = nil
    local MinKills = math.huge

    for _, v in pairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
            local rootPart = v.Character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                local kills = v:GetAttribute("Kills") or 0

                if distance < MaxDistance and kills < MinKills then
                    Target = v
                    MaxDistance = distance
                    MinKills = kills
                end
            end
        end
    end

    SafeDebugPrint("Best target found: " .. (Target and Target.Name or "None"))
    return Target
endfunction Functions.UseAbility(Ability)
    if not LocalPlayer.Character then
        return
    end
    local Tool = LocalPlayer.Backpack:FindFirstChild(Ability)
    if Tool then
        SafeDebugPrint("Using ability: " .. Ability)
        LocalPlayer.Character.Communicate:FireServer({
            Tool = Tool,
            Goal = "Console Move",
            ToolName = tostring(Ability)
        })
    else
        SafeDebugPrint("Ability not found: " .. Ability)
    end
end

function Functions.RandomAbility()
    if not LocalPlayer.PlayerGui:FindFirstChild("Hotbar") then
        return nil
    end
    local Hotbar = LocalPlayer.PlayerGui.Hotbar.Backpack.Hotbar
    local Abilities = {}

    for _, v in pairs(Hotbar:GetChildren()) do
        if v.ClassName ~= "UIListLayout" and v.Visible and v.Base.ToolName.Text ~= "N/A" and not v.Base:FindFirstChild("Cooldown") then
            table.insert(Abilities, v)
        end
    end

    if #Abilities > 0 then
        local RandomAbility = Abilities[math.random(1, #Abilities)]
        return RandomAbility.Base.ToolName.Text
    else
        SafeDebugPrint("No available abilities")
        return nil
    end
endfunction Functions.ActivateUltimate()
    local UltimateBar = LocalPlayer:GetAttribute("Ultimate") or 0
    if UltimateBar >= 100 then
        LocalPlayer.Character.Communicate:FireServer({
            MoveDirection = Vector3.new(0, 0, 0),
            Key = Enum.KeyCode.G,
            Goal = "KeyPress"
        })
        SafeDebugPrint("Ultimate activated")
    else
        SafeDebugPrint("Ultimate not ready: " .. UltimateBar .. "%")
    end
end

function Functions.TeleportUnderPlayer(player)
    if not player.Character then
        return
    end
    local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if rootPart and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetCFrame = rootPart.CFrame * CFrame.new(0, -5, 0)
        LocalPlayer.Character:SetPrimaryPartCFrame(targetCFrame)
        SafeDebugPrint("Teleported under player: " .. player.Name)
    else
        SafeDebugPrint("Failed to teleport under player: " .. player.Name)
    end
endlocal Tab = Window:Tab({
    Title = "最强战场",
    Icon = "bird",
    Locked = false
})

local Dropdown = Tab:Dropdown({
    Title = "传送位置",
    Values = {"地图", "山脉", "安全港", "秘密房间1", "秘密房间2"},
    Value = "地图",
    Callback = function(option)
        if option == "地图" then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(63.4928513, 440.505829, -92.9229507)
        elseif option == "山脉" then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(253.515198, 699.103455, 420.533813)
        elseif option == "安全港" then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-774.454834, -137.237228, 126.384216)
        elseif option == "秘密房间1" then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-62, 29, 20338)
        elseif option == "秘密房间2" then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1068, 133, 23015)
        end
    end
})

local TPYW
local Button = Tab:Button({
    Title = "设置原位",
    Desc = "设置原本的位置",
    Locked = false,
    Callback = function()
        TPYW = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
    end
})

local Button = Tab:Button({
    Title = "传送原位",
    Desc = "传送到原位",
    Locked = false,
    Callback = function()
        if TPYW then
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = TPYW
        end
    end
})local BCXZJHYT = false
local trashMasterToggle = Tab:Toggle({
    Title = "不朝向好友",
    Desc = "自动朝向不朝向好友",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        BCXZJHYT = state
    end
})

local AUTO_TRASH_MASTER = false
local Toggle = Tab:Toggle({
    Title = "自动垃圾桶",
    Desc = "拾取+传送最近玩家身后+攻击",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        AUTO_TRASH_MASTER = state

        if state then
            task.spawn(function()
                local Players = game:GetService("Players")
                local Workspace = game:GetService("Workspace")
                local RunService = game:GetService("RunService")
                local TRASH_RANGE = 15
                local PLAYER_RANGE = 100
                local PICKUP_DISTANCE = 2
                local ATTACK_DISTANCE = 2
                local HEIGHT_OFFSET = 3
                local localPlayer = Players.LocalPlayer
                local character, rootPart, humanoid

                local function updateCharacter()
                    character = localPlayer.Character
                    if character then
                        rootPart = character:FindFirstChild("HumanoidRootPart")
                        humanoid = character:FindFirstChildOfClass("Humanoid")
                    else
                        rootPart = nil
                        humanoid = nil
                    end
                endupdateCharacter()
localPlayer.CharacterAdded:Connect(updateCharacter)

local function getTrashPart(trashModel)
    return trashModel:FindFirstChild("Handle") or trashModel:FindFirstChild("MainPart") or trashModel:FindFirstChild("TrashCan") or trashModel.PrimaryPart or trashModel:FindFirstChildWhichIsA("BasePart")
end

local function performAction(action)
    if AUTO_TRASH_MASTER and character then
        local communicate = character:FindFirstChild("Communicate")
        if communicate then
            communicate:FireServer({["Goal"] = action})
        end
    end
end

local function calculateOffsetPosition(targetPos, referencePos)
    local direction = (targetPos - referencePos).Unit
    direction = Vector3.new(direction.X, 0, direction.Z).Unit

    if direction.Magnitude < 0.1 then
        direction = Vector3.new(math.random(), 0, math.random()).Unit
    end

    return targetPos + (direction * PICKUP_DISTANCE)
end

local function calculateBehindPosition(targetRoot)
    local lookVector = targetRoot.CFrame.LookVector
    lookVector = Vector3.new(lookVector.X, 0, lookVector.Z).Unit

    return targetRoot.Position - (lookVector * ATTACK_DISTANCE)
end

local function findNearestPlayer()
    if not rootPart then
        return nil, nil
    end

    local nearestPlayer = nil
    local nearestDistance = math.huge
    local targetPosition = nil

    for _, targetPlayer in ipairs(Players:GetPlayers()) do
        if targetPlayer ~= localPlayer and targetPlayer.Character then
            local targetChar = targetPlayer.Character
            local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
            local targetHum = targetChar:FindFirstChildOfClass("Humanoid")

            if targetRoot and targetHum and targetHum.Health > 0 then
                local distance = (rootPart.Position - targetRoot.Position).Magnitude
                if distance <= PLAYER_RANGE and distance < nearestDistance then
                    nearestDistance = distance
                    nearestPlayer = targetPlayer
                    targetPosition = calculateBehindPosition(targetRoot)
                end
            end
        end
    end

    return nearestPlayer, targetPosition
endlocal function teleportTo(position, faceTarget)
    if rootPart and AUTO_TRASH_MASTER then
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {character}

        local groundPosition = position
        local ray = Workspace:Raycast(position + Vector3.new(0, 10, 0), Vector3.new(0, -20, 0), raycastParams)
        if ray and ray.Position then
            groundPosition = ray.Position + Vector3.new(0, HEIGHT_OFFSET, 0)
        else
            groundPosition = position + Vector3.new(0, HEIGHT_OFFSET, 0)
        end

        if faceTarget then
            local lookVector = (faceTarget - groundPosition).Unit
            rootPart.CFrame = CFrame.new(groundPosition, groundPosition + lookVector)
        else
            rootPart.CFrame = CFrame.new(groundPosition)
        end
    end
end

while AUTO_TRASH_MASTER and game:GetService("RunService").Heartbeat:Wait() do
    pcall(function()
        updateCharacter()
        if not character or not rootPart or not humanoid or humanoid.Health <= 0 then
            task.wait(1)
            return
        end

        if not character:GetAttribute("HasTrashcan") then
            local trashFolder = Workspace:FindFirstChild("Trash") or (Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild("Trash"))

            if not trashFolder then
                task.wait(1)
                return
            end

            local nearestTrash, nearestDistance, trashPosition
            for _, trashModel in ipairs(trashFolder:GetChildren()) do
                if trashModel:IsA("Model") then
                    local trashPart = getTrashPart(trashModel)
                    if trashPart then
                        local distance = (rootPart.Position - trashPart.Position).Magnitude
                        if distance <= TRASH_RANGE and (not nearestDistance or distance < nearestDistance) then
                            nearestTrash = trashModel
                            nearestDistance = distance
                            trashPosition = trashPart.Position
                        end
                    end
                end
            end                            if nearestTrash and trashPosition then
                                local offsetPosition = calculateOffsetPosition(trashPosition, rootPart.Position)

                                teleportTo(offsetPosition, trashPosition)
                                task.wait(0.2)

                                local direction = (trashPosition - rootPart.Position).Unit
                                local lookVector = Vector3.new(direction.X, 0, direction.Z).Unit
                                if lookVector.Magnitude > 0.1 then
                                    rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)
                                end

                                performAction("LeftClick")
                                task.wait(0.15)
                                performAction("LeftClickRelease")

                                local waitTime = 0
                                while waitTime < 2 and AUTO_TRASH_MASTER do
                                    if character:GetAttribute("HasTrashcan") then
                                        SafeDebugPrint("成功拾取垃圾桶")
                                        break
                                    end
                                    task.wait(0.1)
                                    waitTime = waitTime + 0.1
                                end
                            else
                                task.wait(1)
                            end
                        else
                            local nearestPlayer, behindPos = findNearestPlayer()

                            if nearestPlayer and behindPos then
                                local targetChar = nearestPlayer.Character
                                local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")

                                if not targetRoot then
                                    task.wait(0.5)
                                    return
                                end

                                teleportTo(behindPos, targetRoot.Position)
                                task.wait(0.2)

                                local direction = (targetRoot.Position - rootPart.Position).Unit
                                local lookVector = Vector3.new(direction.X, 0, direction.Z).Unit
                                if lookVector.Magnitude > 0.1 then
                                    rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)
                                end

                                performAction("LeftClick")
                                task.wait(0.1)
                                performAction("LeftClickRelease")

                                SafeDebugPrint("攻击玩家: " .. nearestPlayer.Name)

                                task.wait(1.5)
                            else
                                SafeDebugPrint("未找到可攻击玩家")
                                task.wait(1)
                            end
                        end
                    end)
                end
            end)
        end
    end
})local attackAuraConnection
local Toggle = Tab:Toggle({
    Title = "攻击光环",
    Desc = "其他玩家靠近自动攻击",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        kenConfiguration.Main.Combat.AttackAura = state
        SafeDebugPrint("攻击光环: " .. tostring(state))

        if attackAuraConnection then
            attackAuraConnection:Disconnect()
            attackAuraConnection = nil
        end

        if state then
            attackAuraConnection = RunService.RenderStepped:Connect(function()
                if not kenConfiguration.Main.Combat.AttackAura then
                    return
                end
                if not HumanoidRootPart or not LocalPlayer.Character then
                    return
                end

                local NearestTarget = Functions.BestTarget(5)
                if NearestTarget then
                    Functions.TeleportUnderPlayer(NearestTarget)
                    local RandomAbility = Functions.RandomAbility()
                    if RandomAbility then
                        Functions.UseAbility(RandomAbility)
                    else
                        if kenConfiguration.Main.Farm.AutoUltimate then
                            Functions.ActivateUltimate()
                        end
                    end
                end
            end)
        end
    end
})

local killFarmConnection
local Toggle = Tab:Toggle({
    Title = "自动战斗",
    Desc = "角色自动战斗",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        kenConfiguration.Main.Farm.KillFarm = state
        SafeDebugPrint("杀戮光环: " .. tostring(state))

        if killFarmConnection then
            killFarmConnection:Disconnect()
            killFarmConnection = nil
        end

        if state then
            killFarmConnection = RunService.RenderStepped:Connect(function()
                if not kenConfiguration.Main.Farm.KillFarm then
                    return
                end
                if not HumanoidRootPart or not LocalPlayer.Character then
                    return
                end

                local BestTarget = Functions.BestTarget()
                if BestTarget then
                    Functions.TeleportUnderPlayer(BestTarget)
                    local RandomAbility = Functions.RandomAbility()
                    if RandomAbility then
                        Functions.UseAbility(RandomAbility)
                    else
                        if kenConfiguration.Main.Farm.AutoUltimate then
                            Functions.ActivateUltimate()
                        end
                    end
                end
            end)
        end
    end
})

local ZDGJT = false
local Toggle = Tab:Toggle({
    Title = "自动攻击",
    Desc = "角色自动攻击",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        ZDGJT = state
        if state then
            task.spawn(function()
                while ZDGJT and task.wait(0.3) do
                    if Character then
                        local communicate = Character:FindFirstChild("Communicate")
                        if communicate then
                            communicate:FireServer({["Goal"] = "LeftClick"})
                            task.wait(0.05)
                            communicate:FireServer({["Goal"] = "LeftClickRelease"})
                        end
                    end
                end
            end)
        end
    end
})        local Toggle = Tab:Toggle({
            Title = "自动开大",
            Desc = "角色自动使用终极",
            Icon = "bird",
            Type = "Checkbox",
            Default = false,
            Callback = function(state)
                kenConfiguration.Main.Farm.AutoUltimate = state
                SafeDebugPrint("自动终极技能: " .. tostring(state))
            end
        })

        local ELZRCSXKT = false
        local Toggle = Tab:Toggle({
            Title = "抓人传虚空",
            Desc = "使用英雄猎人角色2技能抓人传送虚空",
            Icon = "bird",
            Type = "Checkbox",
            Default = false,
            Callback = function(state)
                ELZRCSXKT = state

                local Players = game:GetService("Players")
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local UserInputService = game:GetService("UserInputService")
                local LocalPlayer = Players.LocalPlayer
                local Backpack = LocalPlayer:WaitForChild("Backpack")
                local targetToolName = "Lethal Whirlwind Stream"
                if state then
                    Backpack.ChildAdded:Connect(function(tool)
                        if ELZRCSXKT and tool:IsA("Tool") and tool.Name == targetToolName then
                            tool.Equipped:Connect(function()
                                local A = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                                task.wait(1)
                                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-62, 29, 20338)
                                task.wait(3)
                                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = A
                            end)
                        end
                    end)
                end
            end
        })
    end
})
